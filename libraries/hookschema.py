# generated by datamodel-codegen:
#   filename:  hook.schema.json

from __future__ import annotations

from typing import Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Header(RootModel[Optional[Dict[str, List[str]]]]):
    root: Optional[Dict[str, List[str]]] = None


class MetaData(RootModel[Optional[Dict[str, str]]]):
    root: Optional[Dict[str, str]] = None


class FileInfo(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: Optional[str] = Field(None, alias="ID")
    size: Optional[int] = Field(None, alias="Size")
    size_is_deferred: Optional[bool] = Field(None, alias="SizeIsDeferred")
    offset: Optional[int] = Field(None, alias="Offset")
    meta_data: Optional[MetaData] = Field(None, alias="MetaData")
    is_partial: Optional[bool] = Field(None, alias="IsPartial")
    is_final: Optional[bool] = Field(None, alias="IsFinal")
    partial_uploads: Optional[List[str]] = Field(None, alias="PartialUploads")
    storage: Optional[Dict[str, str]] = Field(None, alias="Storage")


class HTTPRequest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    method: Optional[str] = Field(None, alias="Method")
    uri: Optional[str] = Field(None, alias="URI")
    remote_addr: Optional[str] = Field(None, alias="RemoteAddr")
    header: Optional[Header] = Field(None, alias="Header")


class HookEvent(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    upload: Optional[FileInfo] = Field(None, alias="Upload")
    http_request: Optional[HTTPRequest] = Field(None, alias="HTTPRequest")


class HookRequest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[str] = Field(None, alias="Type")
    event: Optional[HookEvent] = Field(None, alias="Event")


class Model(RootModel[Optional[HookRequest]]):
    root: Optional[HookRequest] = None
