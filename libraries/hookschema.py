# generated by datamodel-codegen:
#   filename:  hook.schema.json
#   timestamp: 2025-07-23T10:18:14+00:00

from __future__ import annotations

from typing import Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Header(RootModel[Optional[Dict[str, List[str]]]]):
    root: Optional[Dict[str, List[str]]] = None


class MetaData(RootModel[Optional[Dict[str, str]]]):
    root: Optional[Dict[str, str]] = None


class FileInfo(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: str = Field(..., alias="ID")
    size: int = Field(..., alias="Size")
    size_is_deferred: bool = Field(..., alias="SizeIsDeferred")
    offset: int = Field(..., alias="Offset")
    meta_data: MetaData = Field(..., alias="MetaData")
    is_partial: bool = Field(..., alias="IsPartial")
    is_final: bool = Field(..., alias="IsFinal")
    partial_uploads: List[str] = Field(..., alias="PartialUploads")
    storage: Dict[str, str] = Field(..., alias="Storage")


class HTTPRequest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    method: str = Field(..., alias="Method")
    uri: str = Field(..., alias="URI")
    remote_addr: str = Field(..., alias="RemoteAddr")
    header: Header = Field(..., alias="Header")


class HookEvent(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    upload: FileInfo = Field(..., alias="Upload")
    http_request: HTTPRequest = Field(..., alias="HTTPRequest")


class HookRequest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: str = Field(..., alias="Type")
    event: HookEvent = Field(..., alias="Event")


class Model(RootModel[HookRequest]):
    root: HookRequest
