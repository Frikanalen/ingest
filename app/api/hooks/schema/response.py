# generated by datamodel-codegen:
#   filename:  hook-response.schema.json

from __future__ import annotations

from typing import Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel


class HTTPHeader(RootModel[Optional[dict[str, str]]]):
    root: dict[str, str] | None = None


class HTTPResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    status_code: int | None = Field(None, alias="StatusCode")
    body: str | None = Field(None, alias="Body")
    header: HTTPHeader | None = Field(None, alias="Header")


class MetaData(RootModel[Optional[dict[str, str]]]):
    root: dict[str, str] | None = None


class FileInfoChanges(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    id: str | None = Field(None, alias="ID")
    meta_data: MetaData | None = Field(None, alias="MetaData")
    storage: dict[str, str] | None = Field(None, alias="Storage")


class HookResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    http_response: HTTPResponse | None = Field(None, alias="HTTPResponse")
    reject_upload: bool | None = Field(None, alias="RejectUpload")
    reject_termination: bool | None = Field(None, alias="RejectTermination")
    change_file_info: FileInfoChanges | None = Field(None, alias="ChangeFileInfo")
    stop_upload: bool | None = Field(None, alias="StopUpload")


class Model(RootModel[Optional[HookResponse]]):
    root: HookResponse | None = None
